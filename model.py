# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xFLMUdbuYoQSBBx3khPiHBbG9NM2kWMF
"""

import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
import joblib

df = pd.read_csv("loan_data.csv")
print(" Dataset :", df.shape)

custom_stopwords = {
    'the', 'and', 'is', 'in', 'to', 'of', 'for', 'on', 'a', 'with', 'i', 'need', 'want', 'this', 'it'
}

def clean_text(text):
    text = re.sub(r'[^a-zA-Z\s]', '', str(text).lower())
    tokens = [word for word in text.split() if word not in custom_stopwords and len(word) > 2]
    return ' '.join(tokens)

df["Text_Clean"] = df["Text"].apply(clean_text)

le_employment = LabelEncoder()
df["Employment_Encoded"] = le_employment.fit_transform(df["Employment_Status"])

le_approval = LabelEncoder()
df["Approval_Encoded"] = le_approval.fit_transform(df["Approval"])

tfidf = TfidfVectorizer(max_features=300, ngram_range=(1, 2), min_df=2, max_df=0.9)
text_vectors = tfidf.fit_transform(df["Text_Clean"])

numerical = df[["Income", "Credit_Score", "Loan_Amount", "DTI_Ratio"]].values
employment = df[["Employment_Encoded"]].values
features = np.hstack((text_vectors.toarray(), numerical, employment))

feature_names = list(tfidf.get_feature_names_out()) + ["Income", "Credit_Score", "Loan_Amount", "DTI_Ratio", "Employment"]
df_numerical = pd.DataFrame(features, columns=feature_names)
print("\n Dataset after conversion to numerical:")
print(df_numerical.head())

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

df_normalized = pd.DataFrame(features_scaled, columns=feature_names)
print("\n📏 Dataset after normalization:")
print(df_normalized.head())

target = df["Approval_Encoded"].values
X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.2, stratify=target, random_state=42)

models = {
    "RandomForest": RandomForestClassifier(random_state=42),
    "LogisticRegression": LogisticRegression(max_iter=1000, random_state=42),
    "SVM": SVC(probability=True, random_state=42)
}

best_model = None
best_accuracy = 0

for name, model in models.items():
    model.fit(X_train, y_train)
    acc = accuracy_score(y_test, model.predict(X_test))
    print(f"{name} Accuracy: {acc:.4f}")
    if acc > best_accuracy:
        best_model = model
        best_accuracy = acc

print(f"\n✅ Best Model: {type(best_model).__name__} with Accuracy: {best_accuracy:.4f}")

joblib.dump(best_model, "best_model.pkl")
joblib.dump(tfidf, "tfidf.pkl")
joblib.dump(scaler, "scaler.pkl")
joblib.dump(le_employment, "encoder_employment.pkl")
joblib.dump(le_approval, "encoder_approval.pkl")